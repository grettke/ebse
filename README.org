#+title: Emacs Batch Server Eval

From a Bash Interactive Shell Running Commands on Emacs:

[[file:/demo.png]]

From a Keyboard Maestro Non-Interactive Non-Login Shell Running Commands in Bash via Emacs:

/The Macro/

[[file:/demo-non.png]]

/The Execution/

[[file:demo-non-quote.png]]

* TLDR

Get unquoted result from Emacs server ~eval~.

* About

Emacs is powerful. Using Emacs as a shell command is even more powerful. Most of us first attempt that by using ~emacsclient --eval EXPR~. Unfortunately, we quickly run into an annoying problem: automatically quoted string result values!

Shell functions don't automatically quote returned string values. Doing so would result in unpredictable behavior /at best/. More likely, something /bad/ would happen. Good user-defined functions don't auto-quote strings either: that must include using Emacs as a shell command. So why doesn't using Emacs as a shell command behave so well out of the box? Well, it does act right, for Emacs, that is, just not for you: here is why.

Emacs server begins by delegating ~EXPR~'s evaluation to ~(describe-symbol 'server-eval-and-print)~. After ~(describe-symbol 'eval)~'ing ~EXPR~, the result gets formatted by ~(describe-symbol 'pp)~ with a singular goal: quote the result to make output that ~(describe-symbol 'read)~ can handle. Emacs reads strings as characters encased in double-quotes, ~read~ can read that string format; therefore, Emacs server ~eval~ returns that [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Printed-Representation.html][printed representation]] and voilÃ : that is why Emacs as a shell command auto quotes its return values. Now you must ask yourself, "Where do we begin /fixing/ this?". Well, here, next, is where!

When you run the shell command ~printf "Hello, world.\n"~, ~printf~ behaves just like any other shell command: ~Hello, world.~ appears on the terminal /without / automatically quoted strings. The question is then: how do we make Emacs as a shell command.  The answer is simple: we follow the /standard/ approach for printing things in the shell!

~printf~ is free to print out /whatever/ it wants /however/ it wants simply by writing directly to the ~STDOUT~ stream. Emacs as a shell command can do the same thing, and it is simple: run Emacs in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Batch-Mode.html][Batch Mode]]! In Batch Mode [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html][Output Functions]] print to ~STDOUT~. Start Emacs with ~--batch~ and you are in batch mode: that is all it takes. What remains now is how do we string that all together to use Emacs as a properly behaving shell command? Yet again, the answer is simple: it comes in the form of a convenient little entry point into the Emacs server named ~(describe-symbol 'server-eval-at)~.

Emacs server operates in a client-server architecture. Emacs server is the server; it sits around running, waiting for someone to tell it to do something. Clients connect to it and ask it to do things. ~emacsclient~ is an excellent example of a client: you run it, it connects to the Emacs server, and it does something.  Like you already saw, though: it can't redirect its output to ~STDOUT~, problem un-solved! Is there a way to create a client ourselves, one that somehow prints to ~STDOUT~? Yes, ~server-eval-at~ lets us programmatically create an Emacs server client! By stringing together all of these factoids now, we can get everything we want and need.

Here is how:
- Start Emacs in batch mode, so it redirects all output to ~STDOUT~.
- Programatically create an Emacs server client using ~server-eval-at~ by using the ~--eval~ argument to Emacs.
- Upon calling it, your client will connect to your Emacs server and delegate its work to ~server-eval-and-print~. Just like before, it will ~EVAL~ your code and return it to the client for printing.
- Since your client is running in batch mode, its output goes directly to ~STDOUT~.
- You got exactly what you wanted: using Emacs as a shell command no longer auto-quotes string results!
From here, you can use Emacs as a shell command anywhere.

For convenience, this project demonstrates /my personal/ approach to setting it up. It happens to work in both Login Shells /and/
Non-Interactive Non-Login shells too! It's perfect for running from the terminal, from batch jobs, and even something as fun and powerful as [[https://www.keyboardmaestro.com/main/][Keyboard Maestro]].

Keyboard Maestro, combined with the approach above, grants access to your entire Emacs environment from literally anywhere within MacOS. Talk about the best of both worlds: you will be rocking on MacOS like you never have before. Trust me: you will love it!

Have fun and be well fellow Emacsers. We live in a kind, prosperous, and creative world. For hackers like us, there is truly nothing better than here. Hack on!

* My Setup (EBSE)

EBSE is my simple implementation of the above approach. It is so simplistic and so specific that I recommend you write your own instead of customizing it for your situation. It would not be very comfortable to tell you that this is the pinnacle of approaches. However, if you must read it, there is a single redeeming value: it works in both interactive and non-interactive non-login shells. If you must use it, then configure two variables in ~ebse~ and source it in your config (and maybe ~> /dev/null~ to keep it quiet). My personal preference is to define the function for interactive shells and use the script for non-interactive non-login shells.

The /only/ thing you need to read is the Emacs invocation in the ~ebse~ function definition in ~ebsefn.sh~.

It only takes one line of code to implement the approach described here! It is so cool. Just copy that line into your setup, and bam, you are done.

So you can see it in action: here are some examples of using it. It works as you would expect any other shell function:

#+BEGIN_SRC sh
ebse '(message "Hello, world.")'
# Results go to STDOUT just like you expect.
ebse '(message "Hello, world.")' >> ~/tmp/log.txt
ebse "(+ 1 1)"
ebse "emacs-version"
# Use it in an argument
printf "How many is binary? $(ebse '(+ 1 1)')\n"
# Use it in a Non-Interactive Non-Login shell
# with the helper script ~ebse~.
~/src/ebse/ebse "(+ 1 1)"
#+END_SRC

* Using EBSE as a Proxy to an Interactive Shell

Like me, most of you are already running an interactive shell instance. Even more likely, you invoked your Emacs from there. Consequently, your interactive shell environment is configured perfectly: ~PATH~, aliases functions, and everything else is /just right/ for you: you are ready to get some work done. Unfortunately, then comes the bad news: you need to get some work done using a non-interactive shell.

Non-interactive shells don't run the [[https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html][Bash Startup Sequence]], so your carefully crafted system amounts to nothing as far as the non-interactive shell is concerned. Before doing your work, you have to reconfigure everything you need, /again/, before starting with the /real/ job at hand. Yuck! Fortunately, there is a workaround: Emacs! Don't tell me you are surprised! It's simple.

Here is why: Emacs is already running in your interactive shell with everything you need, and you can easily interact with it using ~server-eval-at~. Want to work with your shell? Emacs has got you covered. Just call any member of the ~shell-command~ family of functions.

You run your non-interactive shell, connect to the Emacs server on your interactive shell, and execute your interactive shell's commands using the ~shel-command~ family of functions. It is simple.  For example, here is how it might look to call Fortune:

#+begin_src bash
~/src/ebse/ebse '(shell-command-to-string "fortune")'
#+end_src

You get the picture.

Now you have remote access to Emacs along with a proxy to your interactive shell instance. If you are an Emacs and Bash [[https://www.gnu.org/software/bash/manual/html_node/index.html][Fanatic]], then you should be on cloud nine by this point.

I hope you are.

Happy hacking!

* Using EBSE With Keyboard Maestro

[[https://www.keyboardmaestro.com/main/][Keyboard Maestro]] is a brilliant application. It does a million things, well, and it is easy to play around with it given the infinite evaluation period. Still, I only wanted it to do one thing: *use Emacs from anywhere inside MacOS*. Fortunately, it turns out to be easy. Here is all it takes:

- First, find some cool Elisp code to run, then insert the results into your macOS app. [[https://github.com/grettke/corporate-bs-generator][corporate-bs-generator]] is a perfect example.
- Configure ~ebse~ (or something like it).
- Create a new macro.
- Triggered by 'This String Is Typed': "eBS"
  - "case must match"
    - If you /didn't/ rename your script from ~ebse~ to something else, then Keyboard Maestro will keep executing this macro while you are typing ~ebse~, which is awkward! Case-sensitive execution avoids this confusing situation.
- Add an action: [[https://wiki.keyboardmaestro.com/action/Execute_a_Shell_Script][Execute Shell Script]].
- Choose "Execute text script" and "type results".
- In the input box add this:
  #+BEGIN_SRC sh
~/src/ebse/ebse "(corporate-bs-generator-make)"
  #+END_SRC
- Test it out first by choosing to "display results in a window" and click "Try". You should see something like this:
  #+BEGIN_SRC sh
conveniently pursue viral initiatives
  #+END_SRC
- Now, switch it back to "type results".
- From here on in, you can return to work with your newfound powerful combination of Emacs, Keyboard Maestro, and the Corporate BS Generator to rise the corporate ranks by compellingly scaling technically sound NoSQL or some such things!

Suddenly you get the best of both worlds: 100% of Emacs available on 100% of your computer. It works brilliantly. I hope you have a lot of fun!
